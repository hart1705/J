@model PORTAL.WEB.Models.ApplicationUserViewModels.ApplicationUserModel
@{
    ViewData["Title"] = "User Form";
    Layout = "~/Views/Shared/_FormLayout.cshtml";
}

@section ContentHeader{
    <div class="row">
        <div class="col-md-12">
            <div class="pull-left">
                <small>Application User</small>
                <h4>@Model.UserName</h4>
            </div>
            <div class="pull-right">
                @{ Html.RenderPartial("_FormCommonHeaderGroup", new FormStatusModel { CreatedById = Model.CreatedBy, CreatedOn = Model.CreatedOn, Status = Model.Status }); }
            </div>
        </div>
    </div>
}
@section ControlHeader{
    @{ await Html.RenderPartialAsync("_FormCommonButtonControl", new FormButtonControlModel { ControllerName = "ApplicationUser", FormType = Model.FormType, IsRecordOwner = Model.IsRecordOwner, Status = Model.Status }); }
}

<div class="row">
    <div class="col-md-6" id="record-form-container">
        @{ Html.RenderPartial("_Form", Model);}
    </div>
    <div class="col-md-6" id="testlookup">
        @if (Model.UserHandler.IsSystemAdmin)
        {
            if (Model.FormType != Global.FormType.Create)
            {
                @await Component.InvokeAsync("LookupControl", new { @model = Model.RoleLookup, @enabled = Model.FormType == Global.FormType.Update })
                Html.RenderPartial("_BootstrapModalView", new PORTAL.WEB.Models.HelperViewModels.BootstrapModalViewModel { ModalId = $"{Model.RoleLookup.LookupControlId}-lookup-modal", ModalSize = "modal-default" });
            }
            else
            {
                <text>
                    Create the record to enable content
                </text>
            }
            <br />
            <br />
        }
        <text class="form-section">
            NOTES AND ATTACHMENTS
            <hr />
        </text>
        @if (Model.FormType == Global.FormType.Create)
        {
            <p>Create the record to enable the content.</p>
        }
        else
        {
            @await Component.InvokeAsync("Annotation", new { @entityName = "User", @recordId = Model.Id });
        }
    </div>
</div>